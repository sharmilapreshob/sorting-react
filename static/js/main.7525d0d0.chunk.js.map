{"version":3,"sources":["components/flight.js","App.js","serviceWorker.js","index.js"],"names":["Flight","props","className","flight","map","i","key","segment_id","destination","value","departure","onClick","onSortAirport","id","onSortTime","App","sortByAirport","flights","state","sort","a","b","setState","sortByTime","Date","fetch","then","response","json","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAsBeA,MApBf,SAAiBC,GACf,OACE,6BACI,wBAAIC,UAAU,UACbD,EAAME,OAAOC,IAAI,SAACD,EAAQE,GAAT,OACf,wBAAIH,UAAU,cAAcI,IAAKH,EAAOI,YACxC,yBAAKL,UAAU,gBAAgBC,EAAOK,YAAYC,OAClD,yBAAKP,UAAU,eAAeC,EAAOO,eAIxC,yBAAKR,UAAU,WACb,4BAAQS,QAASV,EAAMW,cAAeV,UAAU,MAAMW,GAAG,eAAzD,wBACA,4BAAQF,QAASV,EAAMa,WAAYZ,UAAU,eAAeW,GAAG,cAA/D,mBCyBKE,E,YAnCb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAMVe,cAAgB,WAAO,IACdC,EAAW,EAAKC,MAAhBD,QACPA,EAAQE,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEZ,YAAYC,MAAQY,EAAEb,YAAYC,OAAS,EAAGW,EAAEZ,YAAYC,MAAQY,EAAEb,YAAYC,MAAQ,EAAI,IACvH,EAAKa,SAAS,CAAEL,aAVG,EAapBM,WAAa,WAAO,IACXN,EAAW,EAAKC,MAAhBD,QACPA,EAAQE,KAAK,SAACC,EAAGC,GAAJ,OAAU,IAAIG,KAAK,cAAgBJ,EAAEV,WAAa,IAAIc,KAAK,cAAgBH,EAAEX,aAC1F,EAAKY,SAAS,CAAEL,aAdf,EAAKC,MAAQ,CACXD,QAAS,IAHM,E,iFAmBE,IAAD,OAClBQ,MAAM,gBACFC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAvB,GAAM,OAAI,EAAKmB,SAAS,CAAEL,QAASd,Q,+BAI9C,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,CAAQC,OAAU0B,KAAKX,MAAMD,QAASH,WAAYe,KAAKN,WAAYX,cAAeiB,KAAKb,qB,GA7B3Ec,a,MCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,KAAK,SAAAiB,GACjCA,EAAaC,gB","file":"static/js/main.7525d0d0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Flight (props) {\n  return (\n    <div>\n        <ul className=\"flight\">\n        {props.flight.map((flight, i) =>\n           <li className=\"flight-list\" key={flight.segment_id}>\n           <div className=\"airport-name\">{flight.destination.value}</div>\n           <div className=\"flight-time\">{flight.departure}</div>\n           </li>\n        )}\n        </ul>\n        <div className=\"buttons\">\n          <button onClick={props.onSortAirport} className=\"btn\" id=\"airportName\">Sort by airport name</button>\n          <button onClick={props.onSortTime} className=\"btn btn-time\" id=\"flightTime\">Sort by date</button>\n        </div>\n    </div>\n  )\n\n}\n\nexport default Flight;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Flight from './components/flight';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flights: []\n    }\n  }\n\nsortByAirport = () => {\n  const {flights} = this.state;\n  flights.sort((a, b) => a.destination.value < b.destination.value ? -1: a.destination.value > b.destination.value ? 1 : 0)\n  this.setState({ flights })\n }\n\n sortByTime = () => {\n   const {flights} = this.state;\n   flights.sort((a, b) => new Date('1970/01/01 ' + a.departure) - new Date('1970/01/01 ' + b.departure))\n   this.setState({ flights })\n }\n\n  componentDidMount() {\n    fetch('../data.json')\n       .then(response => response.json())\n       .then(flight => this.setState({ flights: flight}));\n  }\n\n  render() {\n  return (\n    <div className=\"App\">\n      <Flight flight = {this.state.flights} onSortTime={this.sortByTime} onSortAirport={this.sortByAirport} />\n\n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}